<?php

namespace MandarinMedien\MMCmfRoutingBundle\Entity;

use MandarinMedien\MMCmfNodeBundle\Entity\Node;
use utilphp\util;

/**
 * Class NodeRouteManager
 *
 * Handles the generating, persisting and updating of NodeRoutes
 *
 * @TODO: update child NodeRoutes, if parent Node::name/slug is changed. check if route is an autogenerated one.
 *
 * @package MandarinMedien\MMCmfRoutingBundle\Entity
 */
class NodeRouteManager
{

    /**
     * generates a AutoNodeRoute for a given Node
     *
     * @TODO: check for duplicate uri's and append a count var to slug or similar
     *
     * @param Node $node
     * @return AutoNodeRoute
     */
    public function generateAutoNodeRoute(Node $node)
    {

        $route = (new AutoNodeRoute())
            ->setRoute('/' . $this->slugify($node))
            ->setNode($node);

        /**
         * @var Node $parent
         */
        while (!is_null($parent = $node->getParent())) {
            $route->setRoute('/' . $this->slugify($parent) . $route->getRoute());
            $node = $parent;
        }

        return $route;
    }


    /**
     * get updated AutoNodeRoutes recursive
     *
     * @param Node $node
     * @param null|string $base
     * @return NodeRoute[]
     */
    public function getAutoNodeRoutesRecursive(Node &$node, $base = null)
    {
        $routeObjects = array();

        $route = null;
        $routes = $node->getRoutes();

        // update the AutoNodeRoutes of current Node
        if(count($routes)>0) {

            foreach($routes as $route) {

                if($route instanceof AutoNodeRoute) {
                    $route->setRoute(
                        $base   ? $base . '/' . util::slugify($node->getName())
                                : $this->generateAutoNodeRoute($node)->getRoute()
                    );

                    array_push($routeObjects, $route);
                }
            }
        }


        // recursive run for Node:nodes
        $childs = $node->getNodes();
        if(!is_null($childs)) {

            /**
             * @var Node $child
             */
            foreach($childs as &$child) {
                 $routeObjects = array_merge(
                     $this->getAutoNodeRoutesRecursive($child, $route->getRoute()),
                     $routeObjects
                 );
            }
        }

        return $routeObjects;
    }


    /**
     * generate an url-friendly string from Node::name
     * @param Node $node
     * @return string
     */
    public function slugify(Node $node)
    {
        return util::slugify($node->getName());
    }

}