<?php

namespace MandarinMedien\MMCmfRoutingBundle\Entity;

use Doctrine\ORM\EntityManager;
use MandarinMedien\MMCmfNodeBundle\Entity\Node;
use utilphp\util;

/**
 * Class NodeRouteManager
 *
 * Handles the generating, persisting and updating of NodeRoutes
 *
 * @TODO: update child NodeRoutes, if parent Node::name/slug is changed. check if route is an autogenerated one.
 *
 * @package MandarinMedien\MMCmfRoutingBundle\Entity
 */
class NodeRouteManager
{

    /**
     * @var EntityManager
     */
    private $manager;


    public function __construct(EntityManager $manager)
    {
        $this->manager = $manager;
    }


    /**
     * generates a NodeRoute for a given Node
     *
     * @TODO: check for duplicate uri's and append a count var to slug or similar
     *
     * @param Node $node
     * @return NodeRoute
     */
    public function autoGenerateNodeRoute(Node $node)
    {

        $route = (new NodeRoute())
            ->setRoute('/' . $this->slugify($node))
            ->setNode($node);

        /**
         * @var Node $parent
         */
        while (!is_null($parent = $node->getParent())) {
            $route->setRoute('/' . $this->slugify($parent) . $route->getRoute());
            $node = $parent;
        }

        return $route;
    }


    public function updateNodeRoutesRecursive(Node &$node, $base = null)
    {
        $routeObjects = array();

        $route = null;
        $routes = $node->getRoutes();
        if(count($routes)>0) {
            $route = $routes[0];
            $route->setRoute($base ? $base.'/'.util::slugify($node->getName()): $this->autoGenerateNodeRoute($node)->getRoute());

            array_push($routeObjects, $route);
        }


        $childs = $node->getNodes();
        if(!is_null($childs)) {

            /**
             * @var Node $child
             */
            foreach($childs as &$child) {
                 $routeObjects = array_merge($this->updateNodeRoutesRecursive($child, $route->getRoute()), $routeObjects);
            }
        }

        return $routeObjects;
    }


    /**
     * generate an url-friendly string from Node::name
     * @param Node $node
     * @return string
     */
    public function slugify(Node $node)
    {
        return util::slugify($node->getName());
    }

}